mixin attrInput(txtClass, txtType, txtName, boolReadonly, value)
  input(class=txtClass, type=txtType, name='attr_' + txtName, readonly=boolReadonly, value=value)

mixin field(field)
  -
    let { name, type, readonly, value, placeholder, min, max, size } = field;
    type = type || 'text';
    value = value || '';
    let klass = '';

    let sizeKlass = size ? `el-input--${size}` : null;
    let typeSizeKlass = size ? `el-input-${type}--${size}` : null;

  case (type)
    when "select"
      .el-select
        .el-input(class=sizeKlass)
          .el-input__wrapper
            select.el-input__inner(name=`attr_${name}`, readonly=readonly, class=klass)&attributes(attributes)
              each option in field.options
                - const isSelected = option.value === value || option.selected;
                - const isHidden = option.hidden ? true : false;
                - value = option.value || option.name;
                - console.log;
                option(
                  data-i18n=`opt_${option.name}`,
                  value=value,
                  selected=isSelected,
                  hidden=isHidden
                )= option.text

    when "textarea"
      .el-textarea
        textarea.el-textarea__inner(
          name=`attr_${name}`,
          value=value,
          readonly=readonly,
          data-i18n-placeholder=`placeholder_${name}`,
          placeholder=placeholder,
          class=klass
        )&attributes(attributes)
    when "number"
      - placeholder = placeholder || 0;
      .el-input-number(class=typeSizeKlass)
        unless size == 'simple'
          button.el-input-number__decrease(name=`act_${name}-down`, type='action')
            span.visually-hidden(data-i18n='step_down') Step Down
            span.pictos _
          button.el-input-number__increase(name=`act_${name}-up`, type='action')
            span.visually-hidden(data-i18n='step_up') Step Up
            span.pictos &
        .el-input(class=sizeKlass)
          .el-input__wrapper
            input.el-input__inner(
              name=`attr_${name}`,
              type=type,
              placeholder=placeholder,
              readonly=readonly,
              min=min,
              max=max,
              class=klass
            )

    when "text"
    default
      .el-input(class=sizeKlass)
        .el-input__wrapper
          input.el-input__inner(
            name=`attr_${name}`,
            type=type,
            value=value,
            data-i18n-placeholder=`placeholder_${name}`,
            placeholder=placeholder,
            readonly=readonly,
            class=klass
          )&attributes(attributes)

mixin span(field)
  - const klass = '';
  span(name=`attr_${field.name}`, class!=klass)&attributes(attributes)
